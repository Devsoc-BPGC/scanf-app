Index: app/src/main/java/club/devsoc/scanf/view/activity/ImageActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package club.devsoc.scanf.view.activity\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.graphics.*\nimport android.graphics.pdf.PdfDocument\nimport android.net.Uri\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\nimport android.widget.ImageView\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.core.content.FileProvider\nimport androidx.lifecycle.ViewModelProviders\nimport club.devsoc.scanf.BuildConfig\nimport club.devsoc.scanf.R\nimport club.devsoc.scanf.viewmodel.ImageActivityViewModel\nimport com.priyankvasa.android.cameraviewex.CameraView\nimport com.scanlibrary.ScanActivity\nimport com.scanlibrary.ScanConstants\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\nimport java.text.SimpleDateFormat\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nclass ImageActivity : AppCompatActivity() {\n\n\n    private lateinit var addImageBtn:ImageView\n    private lateinit var okBtn:ImageView\n    private lateinit var imageView: ImageView\n    private lateinit var saveButton:Button\n    private lateinit var numImagesTV:TextView\n    val REQUEST_IMAGE_CAPTURE = 1\n    lateinit var currentPhotoPath: String\n\n    var persistentImageName: String = \"scanned.jpg\"\n\n    private val IMAGE_CAPTURE = 10\n\n    private lateinit var camera:CameraView\n    private val DOCUMENT_SCAN = 20\n    val REQUEST_ID_MULTIPLE_PERMISSIONS = 7\n    private var uriList:ArrayList<Uri> = ArrayList()\n\n    private lateinit var viewModel: ImageActivityViewModel\n\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_image)\n\n        initActivity()\n\n        setupViewModel()\n\n        onClick()\n\n        checkAndRequestPermissions()\n\n    }\n\n    private fun onClick() {\n        okBtn.setOnClickListener(View.OnClickListener {\n            val intent = Intent(applicationContext, ScanActivity::class.java)\n            intent.putExtra(ScanConstants.OPEN_INTENT_PREFERENCE, ScanConstants.OPEN_CAMERA)\n            startActivityForResult(intent, DOCUMENT_SCAN)\n            Log.i(\"TAG\", \">>>>>>>>>>>>>>>>>onClick: clicked btn\")\n        })\n\n        addImageBtn.setOnClickListener(View.OnClickListener {\n            val cameraImgIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n\n            cameraImgIntent.putExtra(\n                MediaStore.EXTRA_OUTPUT,\n                FileProvider.getUriForFile(\n                    applicationContext, BuildConfig.APPLICATION_ID + \".fileprovider\",\n                    File(applicationContext.filesDir, persistentImageName)\n                )\n            )\n            startActivityForResult(cameraImgIntent, IMAGE_CAPTURE)\n        })\n\n        saveButton.setOnClickListener(View.OnClickListener {\n            createPDFWithMultipleImage()\n        })\n    }\n\n    private fun createPDFWithMultipleImage()\n    {\n        var file = getOutputFile()\n        if (file != null) {\n            try {\n                var fileOutputStream = FileOutputStream(file)\n                var pdfDocument = PdfDocument()\n                for (i in 0 until uriList.size) {\n                    var bitmap = BitmapFactory.decodeFile(uriList.get(i).path)\n                    var pageInfo: PdfDocument.PageInfo = PdfDocument.PageInfo.Builder(bitmap.width, bitmap.height, i + 1).create()\n                    var page: PdfDocument.Page = pdfDocument.startPage(pageInfo)\n                    var canvas: Canvas = page.canvas\n                    var paint = Paint()\n                    paint.color = Color.BLUE\n                    canvas.drawPaint(paint)\n                    canvas.drawBitmap(bitmap, 0f, 0f, null)\n                    pdfDocument.finishPage(page)\n                    bitmap.recycle()\n                }\n                pdfDocument.writeTo(fileOutputStream)\n                pdfDocument.close()\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    private fun getOutputFile(): File?\n    {\n        var root = File(getExternalFilesDir(null), \"My PDF Folder\")\n        var isFolderCreated = true\n\n        if (!root.exists()){\n            isFolderCreated = root.mkdir()\n        }\n\n        if (isFolderCreated)\n        {\n//            String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\", Locale.US).format(new Date());\n//            String imageFileName = \"PDF_\" + timeStamp;\n\n            var timestamp:String = SimpleDateFormat(\"yyyyMMdd_HHmmss\", Locale.US).format(Date())\n            var imageFileName:String=\"PDF_\"+timestamp\n            return File(root, imageFileName + \".pdf\")\n        }\n        else\n        {\n            Toast.makeText(this, \"Folder is not created\", Toast.LENGTH_SHORT).show();\n            return null;\n        }\n\n    }\n\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (resultCode != Activity.RESULT_OK) {\n            return\n        }\n\n        when(requestCode) {\n            IMAGE_CAPTURE -> {\n                imageView.setImageBitmap(BitmapFactory.decodeFile(\"${applicationContext.filesDir}/${persistentImageName}\"))\n            }\n\n            DOCUMENT_SCAN -> {\n                val uri: Uri = data?.extras?.getParcelable(ScanConstants.SCANNED_RESULT)!!\n                uriList.add(uri)\n                numImagesTV.setText(String.format(\"Number of images: \",uriList.size))\n                Log.i(\"TAG\", \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>onActivityResult: \"+uri.toString())\n                var bitmap: Bitmap? = null\n                try {\n                    bitmap = MediaStore.Images.Media.getBitmap(contentResolver, uri)\n                    contentResolver.delete(uri, null, null)\n                    imageView.setImageBitmap(bitmap)\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    private fun checkAndRequestPermissions(): Boolean {\n        val camera = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.CAMERA\n        )\n        val readExtStorage = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.READ_EXTERNAL_STORAGE\n        )\n        val writeExtStorage = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.WRITE_EXTERNAL_STORAGE\n        )\n\n        val listPermissionsNeeded: MutableList<String> = ArrayList()\n        if (camera != PackageManager.PERMISSION_GRANTED) {\n            listPermissionsNeeded.add(Manifest.permission.CAMERA)\n        }\n\n        if (readExtStorage != PackageManager.PERMISSION_GRANTED) {\n            listPermissionsNeeded.add(Manifest.permission.READ_EXTERNAL_STORAGE)\n        }\n\n        if (writeExtStorage != PackageManager.PERMISSION_GRANTED) {\n            listPermissionsNeeded.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)\n        }\n\n        if (listPermissionsNeeded.isNotEmpty()) {\n            ActivityCompat.requestPermissions(\n                this,\n                listPermissionsNeeded.toTypedArray(),\n                REQUEST_ID_MULTIPLE_PERMISSIONS\n            )\n            return false\n        }\n        return true\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        when (requestCode) {\n            REQUEST_ID_MULTIPLE_PERMISSIONS -> {\n                val perms: MutableMap<String, Int> = HashMap()\n                // Initialize the map with both permissions\n                perms[Manifest.permission.CAMERA] = PackageManager.PERMISSION_GRANTED\n\n                // Fill with actual results from user\n                if (grantResults.isNotEmpty()) {\n                    var i = 0\n                    while (i < permissions.size) {\n                        perms[permissions[i]] = grantResults[i]\n                        i++\n                    }\n\n                    // Check for both permissions\n                    if (perms[Manifest.permission.CAMERA] != PackageManager.PERMISSION_GRANTED) {\n                        if (ActivityCompat.shouldShowRequestPermissionRationale(\n                                this,\n                                Manifest.permission.CAMERA\n                            )\n                        ) {\n//                            showDialogOK(\"Camera permission required for this app\") { \"_\" , which ->\n//                                when (which) {\n//                                    DialogInterface.BUTTON_POSITIVE -> checkAndRequestPermissions()\n//                                    DialogInterface.BUTTON_NEGATIVE -> {\n//                                    }\n//                                }\n//                            }\n                        } else {\n                            Toast.makeText(\n                                this,\n                                \"Go to settings and enable permissions\",\n                                Toast.LENGTH_LONG\n                            ).show()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private fun setupViewModel() {\n        viewModel = ViewModelProviders.of(this).get(ImageActivityViewModel::class.java)\n    }\n\n\n\n\n    private fun initActivity()\n    {\n        okBtn=findViewById(R.id.image_activity_okbtn)\n        addImageBtn=findViewById(R.id.image_activity_addimg)\n        imageView=findViewById(R.id.image_activity_imgvw)\n        saveButton=findViewById(R.id.image_activity_save_btn);\n        numImagesTV=findViewById(R.id.num_of_images_txt)\n//        camera = findViewById(R.id.camera)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/club/devsoc/scanf/view/activity/ImageActivity.kt	(revision 0c4388cedc0cf52356c07b0e6b6302de4799304b)
+++ app/src/main/java/club/devsoc/scanf/view/activity/ImageActivity.kt	(date 1612452164000)
@@ -164,7 +164,7 @@
             }
 
             DOCUMENT_SCAN -> {
-                val uri: Uri = data?.extras?.getParcelable(ScanConstants.SCANNED_RESULT)!!
+                var uri: Uri = data?.extras?.getParcelable(ScanConstants.SCANNED_RESULT)!!
                 uriList.add(uri)
                 numImagesTV.setText(String.format("Number of images: ",uriList.size))
                 Log.i("TAG", ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>onActivityResult: "+uri.toString())
