Index: app/src/main/java/club/devsoc/scanf/view/activity/ImageActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package club.devsoc.scanf.view.activity\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.ActivityNotFoundException\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.net.Uri\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.os.Environment\nimport android.provider.MediaStore\nimport android.util.Log\nimport android.view.View\nimport android.widget.ImageView\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.core.content.FileProvider\nimport club.devsoc.scanf.BuildConfig\nimport club.devsoc.scanf.R\nimport club.devsoc.scanf.showDialogOK\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\nimport com.priyankvasa.android.cameraviewex.CameraView\nimport com.priyankvasa.android.cameraviewex.ErrorLevel\nimport com.priyankvasa.android.cameraviewex.Image\nimport com.priyankvasa.android.cameraviewex.Modes\nimport com.scanlibrary.ScanActivity\nimport com.scanlibrary.ScanConstants\nimport java.io.File\nimport java.io.IOException\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nclass ImageActivity : AppCompatActivity() {\n\n\n    private lateinit var addImageBtn:ImageView\n    private lateinit var okBtn:ImageView\n    private lateinit var imageView: ImageView\n    val REQUEST_IMAGE_CAPTURE = 1\n    lateinit var currentPhotoPath: String\n\n    var persistentImageName: String = \"scanned.jpg\"\n\n    private val IMAGE_CAPTURE = 10\n\n    private lateinit var camera:CameraView\n    private val DOCUMENT_SCAN = 20\n    val REQUEST_ID_MULTIPLE_PERMISSIONS = 7\n\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_image)\n\n        initActivity()\n\n        okBtn.setOnClickListener(View.OnClickListener {\n            val intent = Intent(applicationContext, ScanActivity::class.java)\n            intent.putExtra(ScanConstants.OPEN_INTENT_PREFERENCE, ScanConstants.OPEN_CAMERA)\n            startActivityForResult(intent, DOCUMENT_SCAN)\n            Log.i(\"TAG\", \">>>>>>>>>>>>>>>>>onClick: clicked btn\")\n        })\n\n        addImageBtn.setOnClickListener(View.OnClickListener {\n            val cameraImgIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n\n            cameraImgIntent.putExtra(\n                MediaStore.EXTRA_OUTPUT,\n                FileProvider.getUriForFile(\n                    applicationContext, BuildConfig.APPLICATION_ID + \".fileprovider\",\n                    File(applicationContext.filesDir, persistentImageName)\n                )\n            )\n            startActivityForResult(cameraImgIntent, IMAGE_CAPTURE)\n        })\n\n        checkAndRequestPermissions()\n\n\n//        camera.addCameraOpenedListener { /* Camera opened. */ }\n//            .addCameraErrorListener { t: Throwable, errorLevel: ErrorLevel -> /* Camera error! */ }\n//            .addCameraClosedListener { /* Camera closed. */ }\n//\n//        // enable only single capture mode\n//        camera.setCameraMode(Modes.CameraMode.SINGLE_CAPTURE)\n//\n//        // OR keep other modes as is and enable single capture mode\n//        camera.enableCameraMode(Modes.CameraMode.SINGLE_CAPTURE)\n//\n//        // Output format is whatever set for [app:outputFormat] parameter\n//        // Callback on UI thread\n//        camera.addPictureTakenListener { image: Image -> /* Picture taken. */ }\n//        if (ActivityCompat.checkSelfPermission(\n//                this,\n//                Manifest.permission.CAMERA\n//            ) != PackageManager.PERMISSION_GRANTED\n//        ) {\n//            //    ActivityCompat#requestPermissions\n//            // here to request the missing permissions, and then overriding\n//            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n//            //                                          int[] grantResults)\n//            // to handle the case where the user grants the permission. See the documentation\n//            // for ActivityCompat#requestPermissions for more details.\n//            return\n//        }\n//        camera.capture()\n//\n//        // Disable single capture mode\n//        camera.disableCameraMode(Modes.CameraMode.SINGLE_CAPTURE)\n//\n//        //addImageBtn.setOnClickListener(View.OnClickListener { dispatchTakePictureIntent() })\n//\n//\n//        /*on clicking photobutton\n//        dispatchTakePictureIntent()\n//        */\n//\n\n    }\n\n//    override fun onResume() {\n//        super.onResume()\n//        if (ActivityCompat.checkSelfPermission(\n//                this,\n//                Manifest.permission.CAMERA\n//            ) != PackageManager.PERMISSION_GRANTED\n//        ) {\n//            // TODO: Consider calling\n//            //    ActivityCompat#requestPermissions\n//            // here to request the missing permissions, and then overriding\n//            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n//            //                                          int[] grantResults)\n//            // to handle the case where the user grants the permission. See the documentation\n//            // for ActivityCompat#requestPermissions for more details.\n//            return\n//        }\n//        camera.start()\n//    }\n//\n//    override fun onPause() {\n//        camera.stop()\n//        super.onPause()\n//    }\n\n//    override fun onDestroyView() {\n//        camera.destroy()\n//        super.onDestroyView()\n//    }\n\n//    private fun dispatchTakePictureIntent() {\n//        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->\n//            // Ensure that there's a camera activity to handle the intent\n//            takePictureIntent.resolveActivity(packageManager)?.also {\n//                // Create the File where the photo should go\n//                val photoFile: File? = try {\n//                    createImageFile()\n//                } catch (ex: IOException) {\n//                    // Error occurred while creating the File\n//\n//                    null\n//                }\n//                // Continue only if the File was successfully created\n//                photoFile?.also {\n//                    val photoURI: Uri = FileProvider.getUriForFile(\n//                        this,\n//                        \"com.example.android.fileprovider\",\n//                        it\n//                    )\n//                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)\n//                    startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)\n//                }\n//            }\n//        }\n//    }\n\n\n//    @Throws(IOException::class)\n//    private fun createImageFile(): File {\n//        // Create an image file name\n//        val timeStamp: String = SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(Date())\n//        val storageDir: File = getExternalFilesDir(Environment.DIRECTORY_PICTURES)!!\n//        return File.createTempFile(\n//            \"JPEG_${timeStamp}_\", /* prefix */\n//            \".jpg\", /* suffix */\n//            storageDir /* directory */\n//        ).apply {\n//            // Save a file: path for use with ACTION_VIEW intents\n//            currentPhotoPath = absolutePath\n//        }\n//    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (resultCode != Activity.RESULT_OK) {\n            return\n        }\n\n        when(requestCode) {\n            IMAGE_CAPTURE -> {\n                imageView.setImageBitmap(BitmapFactory.decodeFile(\"${applicationContext.filesDir}/${persistentImageName}\"))\n            }\n\n            DOCUMENT_SCAN -> {\n                val uri: Uri = data?.extras?.getParcelable(ScanConstants.SCANNED_RESULT)!!\n                Log.i(\"TAG\", \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>onActivityResult: \"+uri.toString())\n                var bitmap: Bitmap? = null\n                try {\n                    bitmap = MediaStore.Images.Media.getBitmap(contentResolver, uri)\n                    contentResolver.delete(uri, null, null)\n                    imageView.setImageBitmap(bitmap)\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    private fun checkAndRequestPermissions(): Boolean {\n        val camera = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.CAMERA\n        )\n        val readExtStorage = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.READ_EXTERNAL_STORAGE\n        )\n        val writeExtStorage = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.WRITE_EXTERNAL_STORAGE\n        )\n\n        val listPermissionsNeeded: MutableList<String> = ArrayList()\n        if (camera != PackageManager.PERMISSION_GRANTED) {\n            listPermissionsNeeded.add(Manifest.permission.CAMERA)\n        }\n\n        if (readExtStorage != PackageManager.PERMISSION_GRANTED) {\n            listPermissionsNeeded.add(Manifest.permission.READ_EXTERNAL_STORAGE)\n        }\n\n        if (writeExtStorage != PackageManager.PERMISSION_GRANTED) {\n            listPermissionsNeeded.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)\n        }\n\n        if (listPermissionsNeeded.isNotEmpty()) {\n            ActivityCompat.requestPermissions(\n                this,\n                listPermissionsNeeded.toTypedArray(),\n                REQUEST_ID_MULTIPLE_PERMISSIONS\n            )\n            return false\n        }\n        return true\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        when (requestCode) {\n            REQUEST_ID_MULTIPLE_PERMISSIONS -> {\n                val perms: MutableMap<String, Int> = HashMap()\n                // Initialize the map with both permissions\n                perms[Manifest.permission.CAMERA] = PackageManager.PERMISSION_GRANTED\n\n                // Fill with actual results from user\n                if (grantResults.isNotEmpty()) {\n                    var i = 0\n                    while (i < permissions.size) {\n                        perms[permissions[i]] = grantResults[i]\n                        i++\n                    }\n\n                    // Check for both permissions\n                    if (perms[Manifest.permission.CAMERA] != PackageManager.PERMISSION_GRANTED) {\n                        if (ActivityCompat.shouldShowRequestPermissionRationale(\n                                this,\n                                Manifest.permission.CAMERA\n                            )\n                        ) {\n//                            showDialogOK(\"Camera permission required for this app\") { \"_\" , which ->\n//                                when (which) {\n//                                    DialogInterface.BUTTON_POSITIVE -> checkAndRequestPermissions()\n//                                    DialogInterface.BUTTON_NEGATIVE -> {\n//                                    }\n//                                }\n//                            }\n                        } else {\n                            Toast.makeText(\n                                this,\n                                \"Go to settings and enable permissions\",\n                                Toast.LENGTH_LONG\n                            ).show()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n\n\n    private fun initActivity()\n    {\n        okBtn=findViewById(R.id.image_activity_okbtn)\n        addImageBtn=findViewById(R.id.image_activity_addimg)\n        imageView=findViewById(R.id.image_activity_imgvw)\n//        camera = findViewById(R.id.camera)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/club/devsoc/scanf/view/activity/ImageActivity.kt	(revision 9088f865808f2250344355764c6167ee03740816)
+++ app/src/main/java/club/devsoc/scanf/view/activity/ImageActivity.kt	(date 1612371933000)
@@ -15,6 +15,7 @@
 import android.provider.MediaStore
 import android.util.Log
 import android.view.View
+import android.widget.Button
 import android.widget.ImageView
 import android.widget.Toast
 import androidx.core.app.ActivityCompat
@@ -41,6 +42,7 @@
     private lateinit var addImageBtn:ImageView
     private lateinit var okBtn:ImageView
     private lateinit var imageView: ImageView
+    private lateinit var saveButton: Button
     val REQUEST_IMAGE_CAPTURE = 1
     lateinit var currentPhotoPath: String
 
@@ -117,7 +119,8 @@
 //        //addImageBtn.setOnClickListener(View.OnClickListener { dispatchTakePictureIntent() })
 //
 //
-//        /*on clicking photobutton
+//        /*
+    //        on clicking photobutton
 //        dispatchTakePictureIntent()
 //        */
 //
@@ -314,6 +317,7 @@
         okBtn=findViewById(R.id.image_activity_okbtn)
         addImageBtn=findViewById(R.id.image_activity_addimg)
         imageView=findViewById(R.id.image_activity_imgvw)
+        saveButton=findViewById(R.id.image_activity_save_btn);
 //        camera = findViewById(R.id.camera)
     }
 }
\ No newline at end of file
Index: app/src/main/res/layout/activity_image.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".view.activity.ImageActivity\">\n\n\n\n    <ImageView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentTop=\"true\"\n        android:id=\"@+id/image_activity_imgvw\"\n        android:layout_above=\"@id/image_activity_okbtn\"/>\n\n\n\n    <ImageView\n        android:layout_width=\"100sp\"\n        android:layout_height=\"100sp\"\n        android:id=\"@+id/image_activity_addimg\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_marginStart=\"50sp\"\n        android:layout_marginBottom=\"25dp\"\n        android:src=\"@drawable/ic_baseline_add_circle_outline_24\"\n        />\n\n    <ImageView\n        android:layout_width=\"100sp\"\n        android:layout_height=\"100sp\"\n        android:id=\"@+id/image_activity_okbtn\"\n        android:layout_marginEnd=\"50sp\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_alignParentRight=\"true\"\n        android:layout_marginBottom=\"25dp\"\n        android:src=\"@drawable/ic_baseline_check_circle_outline_24\"\n        />\n\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_image.xml	(revision 9088f865808f2250344355764c6167ee03740816)
+++ app/src/main/res/layout/activity_image.xml	(date 1612371933000)
@@ -23,7 +23,7 @@
         android:layout_height="100sp"
         android:id="@+id/image_activity_addimg"
         android:layout_alignParentBottom="true"
-        android:layout_marginStart="50sp"
+        android:layout_marginStart="20sp"
         android:layout_marginBottom="25dp"
         android:src="@drawable/ic_baseline_add_circle_outline_24"
         />
@@ -32,11 +32,24 @@
         android:layout_width="100sp"
         android:layout_height="100sp"
         android:id="@+id/image_activity_okbtn"
-        android:layout_marginEnd="50sp"
+        android:layout_marginEnd="20sp"
         android:layout_alignParentBottom="true"
         android:layout_alignParentRight="true"
         android:layout_marginBottom="25dp"
         android:src="@drawable/ic_baseline_check_circle_outline_24"
         />
 
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/image_activity_save_btn"
+        android:layout_alignParentBottom="true"
+        android:layout_marginBottom="50dp"
+        android:padding="20dp"
+        android:text="Save"
+        android:textSize="20dp"
+        android:layout_toRightOf="@+id/image_activity_addimg"
+        android:layout_marginStart="40dp"
+        />
+
 </RelativeLayout>
\ No newline at end of file
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>include ':scanlibrary'\ninclude ':app'\nrootProject.name = \"Scanf\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision 9088f865808f2250344355764c6167ee03740816)
+++ settings.gradle	(date 1612202512000)
@@ -1,3 +1,4 @@
+include ':scanlibrary'
 include ':scanlibrary'
 include ':app'
 rootProject.name = "Scanf"
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.3\"\n\n    defaultConfig {\n        applicationId \"club.devsoc.scanf\"\n        minSdkVersion 21\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n    packagingOptions {\n        pickFirst  'META-INF/*'\n    }\n\n    dataBinding {\n        enabled = true\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\"\n    implementation 'androidx.core:core-ktx:1.3.0'\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n\n    // Google Material Library\n    implementation 'com.google.android.material:material:1.1.0-alpha09'\n\n    // For ViewModel and Livedata\n    implementation \"android.arch.lifecycle:extensions:$lifecycleVersion\"\n    kapt \"android.arch.lifecycle:compiler:$lifecycleVersion\"\n\n    // Retrofit\n    implementation \"com.squareup.retrofit2:retrofit:$retrofitVersion\"\n    implementation \"com.squareup.retrofit2:converter-gson:$retrofitVersion\"\n\n    // QR Code Scanner by budiyev\n    implementation 'com.budiyev.android:code-scanner:2.1.0'\n\n    // For Handling permission\n    implementation 'pub.devrel:easypermissions:3.0.0'\n\n    //databinding compiler\n//    kapt \"com.android.databinding:compiler:3.1.4\"\n//\n    //CameraViewx dependencies\n    implementation \"com.priyankvasa.android:cameraview-ex:3.5.5-alpha\"\n\n    implementation project(path: ':scanlibrary')\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 9088f865808f2250344355764c6167ee03740816)
+++ app/build.gradle	(date 1612280474000)
@@ -27,6 +27,8 @@
 
     packagingOptions {
         pickFirst  'META-INF/*'
+//        pickFirst '**/META-INFMANIFEST.MF'
+
     }
 
     dataBinding {
